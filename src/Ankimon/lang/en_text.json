{
  "startup": "Ankimon Startup.",
  "failed_github": "Failed to fetch data from Github.",
  "catch_button": "Catch Pokemon",
  "defeat_button": "Defeat Pokemon",
  "enemy_pokemon_defeat_text": "Would you want to kill or catch the wild {enemy_pokemon_name} ?",
  "no_ability": "No ability",
  "battle_status_in_progress": "Battle in progress",
  "level": "Level",
  "error_occured": "An error occured with {function} Please post this error message over the Report Bug Issue",
  "missing_mainpokemon_data": "Missing pokemon data",
  "pokemon_about_to_evolve": "{main_pokemon_name} is about to evolve to {evo_pokemon_name} at level {main_pokemon_level}",
  "mainpokemon_can_learn_new_attack": "Your {main_pokemon_name} can learn a new attack !",
  "mainpokemon_learned_new_attack": "Your {main_pokemon_name} learned {new_attack_name} !",
  "mainpokemon_gained_xp": "Your {main_pokemon_name} has gained {exp} XP.\n {experience_till_next_level} exp is needed for next level \n Your pokemon currently has {main_pokemon_xp}",
  "mainpokemon_has_evolved": "Your {prevo_name} has evolved to {evo_name}! \n You can now close this Window.",
  "no_attack_selected": "No attack selected",
  "selected_attack_not_found": "{selected_attack} not found in the list",
  "replaced_attack": "Replaced {selected_attack} with {new_attack}",
  "caught_wild_pokemon": "You caught a wild {enemy_pokemon_name} !",
  "already_caught_pokemon": "You have already caught this pokemon. Please close this window!",
  "multiplier": "Multiplier",
  "pokemon_chose_attack": "{pokemon_name} chose {pokemon_attack}!",
  "move_has_missed": "Move has missed !",
  "dmg_dealt": "{dmg} dmg is dealt to {pokemon_name}.",
  "pokemon_paralyzed": "{pokemon_name} is paralyzed.",
  "pokemon_asleep": "{pokemon_name} is asleep.",
  "pokemon_fainted": "{enemy_pokemon_name} has fainted.",
  "own_pokemon_fainted": "Your {main_pokemon_name} has been defeated and the wild {enemy_pokemon_name} has fled!",
  "picked_main_pokemon": "You picked {main_pokemon_name} as your main pokemon.",
  "show_collection_button": "Show Pokemon Collection",
  "open_ankimon_window_button": "Open Ankimon Window",
  "itembag_button": "Itembag",
  "achievements_button": "Achievements",
  "open_showdown_teambuilder_button": "Open Pokemon Showdown Teambuilder",
  "export_main_pokemon_button": "Export Main Pokemon to PkmnShowdown",
  "export_all_pokemon_button": "Export All Pokemon to PkmnShowdown",
  "export_all_pokemon_to_pokepaste_button": "Export All Pokemon to Pokepaste",
  "open_pokedex_button": "Open Pokedex",
  "eff_chart_button": "Check Effectiveness Chart",
  "gen_chart_button": "Check Generation Chart",
  "join_discord_button": "Join Discord Channel",
  "ankimon_credits_button": "Ankimon Credits",
  "ankimon_about_and_license_button": "Ankimon About and License",
  "open_help_guide_button": "Open Help Guide",
  "report_bug_button": "Report Bug",
  "rate_this_button": "Rate This Addon",
  "ankimon_version_button": "Ankimon Version",
  "ankimon_settings_button": "Ankimon Settings",
  "ankimon_data_button": "Ankimon Data",
  "ankimon_tracker_button": "Ankimon Tracker",
  "logger_button": "Logger",
  "trainer_card_button": "Trainer Card",
  "item_shop_button": "Item Shop",
  "choose_trainer_sprite_button": "Choose Trainer Sprite",
  "choose_pokemon_team_button": "Choose Pokemon Team",
  "ankimon_file_checker_button": "Ankimon File Checker",
  "ankimon_leaderboard_credentials_button": "Ankimon Leaderboard Credentials",
  "download_resources_button": "Download Resources",
  "backing_up_files": "Backing up files",
  "ankimon_button_title": "Ankimon",
  "ankimon_game_button_title": "Game",
  "ankimon_profile_button_title": "Profile",
  "ankimon_collection_button_title": "Collection",
  "ankimon_export_button_title": "Export",
  "ankimon_help_button_title": "Help",
  "ankimon_debug_button_title": "Debug",
  "backup_error": "An error occured while backing up files. Please check the console for more information.",
  "wild_pokemon_appeared": "A wild {enemy_pokemon_name} appeared !",
  "received_an_item": "You received an item: {item_name}",
  "received_a_badge": "You received a badge ",
  "catch_or_free": "Would you like to free or catch the wild {enemy_pokemon_name} ?",
  "choose_nickname": "Choose nickname",
  "enemy_attack_announcement": "{pokemon_name} used {attack_name}!",
  "player_attack_announcement": "{pokemon_name} used {attack_name}!",
  "damage_to_player_pokemon": "{pokemon_name} took {damage} damage!",
  "damage_to_enemy_pokemon": "{pokemon_name} took {damage} damage!",
  "enemy_attack_no_damage": "The attack had no effect on {pokemon_name}!",
  "player_attack_no_damage": "The attack had no effect on {pokemon_name}!",
  "special_battle_status_effect": "{pokemon_name} is affected by {status}!",
  "battle_effects_header": "=== Battle Effects ===",
  "battle_effect_damage": "{pokemon_name} took {damage} damage!",
  "battle_effect_heal": "{pokemon_name} recovered {heal_amount} HP!",
  "battle_effect_status_applied": "{pokemon_name} was inflicted with {status}!",
  "battle_effect_stat_change": "{pokemon_name}'s {stat} {direction} by {amount} stage(s)!",
  "battle_effect_volatile_status": "{pokemon_name} was affected by {status}!",
  "battle_effect_side_condition": "{condition} was set up on {side}!",
  "battle_effect_weather_change": "The weather changed to {weather}!",
  "battle_effect_processing_error": "Error processing battle effect: {error}",
  "battle_multiplier_display": "{multiplier}x Multiplier",
  "effect_volatile_status_applied": "{pokemon_name} is affected by {status}!",
  "effect_volatile_status_removed": "{pokemon_name} is no longer affected by {status}!",
  "attack_no_effect_short": "It had no effect on {pokemon_name}!",
  "damage_dealt_short": "It dealt {damage} damage to {pokemon_name}!",
  "enemy_pokemon_fainted": "{pokemon_name} fainted!",
  "player_pokemon_fainted": "{pokemon_name} fainted!",
  "pokemon_is_sleeping": "{pokemon_name} is fast asleep!",
  "pokemon_is_paralyzed": "{pokemon_name} is paralyzed! It can't move!",
  "pokemon_is_frozen": "{pokemon_name} is frozen solid!",
  "pokemon_is_burned": "{pokemon_name} is hurt by its burn!",
  "pokemon_is_poisoned": "{pokemon_name} is hurt by poison!",
  "pokemon_is_badly_poisoned": "{pokemon_name} is badly poisoned!",
  "pokemon_is_confused": "{pokemon_name} is confused!",
  "pokemon_flinched": "{pokemon_name} flinched and couldn't move!",
  "pokemon_is_taunted": "{pokemon_name} can't use {move_name} after the taunt!",
  "pokemon_special_condition": "{pokemon_name} is affected by {condition}!",
  "effect_damage_dealt": "{pokemon_name} took {damage} damage!",
  "effect_health_restored": "{pokemon_name} restored {heal_amount} HP!",
  "effect_status_applied": "{pokemon_name} was afflicted with {status}!",
  "effect_stat_change": "{pokemon_name}'s {stat} {direction} by {amount} stage(s)!",
  "effect_volatile_status": "{pokemon_name} was affected by {status}!",
  "effect_side_condition": "{side} is protected by {condition}!",
  "effect_weather_change": "The weather changed to {weather}!",
  "battle_effect_weather_start": "The weather changed to {weather}!",
  "battle_effect_weather_end": "The {weather} weather has ended!",
  "your_pokemon": "Your Pokémon",
  "enemy_pokemon": "The opposing Pokémon",
  "your_side": "your team",
  "enemy_side": "the opposing team",
  "stat_increased": "increased",
  "stat_decreased": "decreased",
  "invalid_battle_data_error": "Battle data is invalid!",
  "battle_effects_error": "Error processing battle effects: {error}",
  "battle_processing_error": "Error in battle processing: {error}",
  "battle_message_empty_fallback": "Battle concluded.",
  "super_effective": "It's super effective!",
  "not_very_effective": "It's not very effective...",
  "critical_hit": "A critical hit!",
  "move_missed": "The attack missed!",
  "move_failed": "But it failed!",
  "_comment_regular_status": "=== REGULAR STATUS EFFECTS ===",
  "status_par_apply": "{pokemon_name} is paralyzed!",
  "status_par_remove": "{pokemon_name} is no longer paralyzed!",
  "status_paralyzed_apply": "{pokemon_name} is paralyzed!",
  "status_paralyzed_remove": "{pokemon_name} is no longer paralyzed!",
  "status_brn_apply": "{pokemon_name} is burned!",
  "status_brn_remove": "{pokemon_name} is no longer burned!",
  "status_burn_apply": "{pokemon_name} is burned!",
  "status_burn_remove": "{pokemon_name} is no longer burned!",
  "status_psn_apply": "{pokemon_name} is poisoned!",
  "status_psn_remove": "{pokemon_name} is no longer poisoned!",
  "status_poison_apply": "{pokemon_name} is poisoned!",
  "status_poison_remove": "{pokemon_name} is no longer poisoned!",
  "status_tox_apply": "{pokemon_name} is badly poisoned!",
  "status_tox_remove": "{pokemon_name} is no longer poisoned!",
  "status_toxic_apply": "{pokemon_name} is badly poisoned!",
  "status_toxic_remove": "{pokemon_name} is no longer poisoned!",
  "status_slp_apply": "{pokemon_name} falls asleep!",
  "status_slp_remove": "{pokemon_name} wakes up!",
  "status_sleep_apply": "{pokemon_name} falls asleep!",
  "status_sleep_remove": "{pokemon_name} wakes up!",
  "status_frz_apply": "{pokemon_name} is frozen solid!",
  "status_frz_remove": "{pokemon_name} thaws out!",
  "status_frozen_apply": "{pokemon_name} is frozen solid!",
  "status_frozen_remove": "{pokemon_name} thaws out!",
  "_comment_regular_status_fallbacks": "=== REGULAR STATUS FALLBACKS ===",
  "status_unknown_apply": "{pokemon_name} is affected by {status_name}!",
  "status_unknown_remove": "{pokemon_name} recovers from {status_name}!",
  "_comment_volatile_status": "=== VOLATILE STATUS EFFECTS (NORMALISED) ===",
  "volatile_solarbeam_apply": "{pokemon_name} is gathering sunlight!",
  "volatile_solarbeam_remove": "{pokemon_name} unleashes its stored solar energy!",
  "volatile_skyattack_apply": "{pokemon_name} becomes cloaked in harsh light!",
  "volatile_skyattack_remove": "{pokemon_name} strikes with tremendous power!",
  "volatile_razorwind_apply": "{pokemon_name} whips up a whirlwind!",
  "volatile_razorwind_remove": "{pokemon_name} releases the cutting wind!",
  "volatile_skullbash_apply": "{pokemon_name} withdraws into its shell!",
  "volatile_skullbash_remove": "{pokemon_name} charges forward with its hardened skull!",
  "volatile_freezeshock_apply": "{pokemon_name} is building up electrical energy!",
  "volatile_freezeshock_remove": "{pokemon_name} releases a freezing electrical attack!",
  "volatile_iceburn_apply": "{pokemon_name} is gathering frigid flames!",
  "volatile_iceburn_remove": "{pokemon_name} strikes with burning ice!",
  "volatile_geomancy_apply": "{pokemon_name} is absorbing power from the land!",
  "volatile_geomancy_remove": "{pokemon_name} harnesses the earth's energy!",
  "volatile_fly_apply": "{pokemon_name} flies up high!",
  "volatile_fly_remove": "{pokemon_name} dives down for an attack!",
  "volatile_dig_apply": "{pokemon_name} burrows underground!",
  "volatile_dig_remove": "{pokemon_name} attacks from below!",
  "volatile_dive_apply": "{pokemon_name} dives underwater!",
  "volatile_dive_remove": "{pokemon_name} surfaces with an attack!",
  "volatile_bounce_apply": "{pokemon_name} bounces up high!",
  "volatile_bounce_remove": "{pokemon_name} bounces down for an attack!",
  "volatile_phantomforce_apply": "{pokemon_name} vanishes into another dimension!",
  "volatile_phantomforce_remove": "{pokemon_name} attacks from the shadows!",
  "volatile_shadowforce_apply": "{pokemon_name} disappears into the shadows!",
  "volatile_shadowforce_remove": "{pokemon_name} strikes from the darkness!",
  "volatile_skydrop_apply": "{pokemon_name} takes the target into the sky!",
  "volatile_skydrop_remove": "{pokemon_name} drops down with the target!",
  "volatile_wrap_apply": "{pokemon_name} wraps around the target!",
  "volatile_wrap_remove": "{pokemon_name} releases its grip!",
  "volatile_bind_apply": "{pokemon_name} binds the target tightly!",
  "volatile_bind_remove": "{pokemon_name} loosens its binding!",
  "volatile_firespin_apply": "{pokemon_name} traps the target in a vortex of fire!",
  "volatile_firespin_remove": "The fiery vortex dissipates!",
  "volatile_whirlpool_apply": "{pokemon_name} traps the target in a whirlpool!",
  "volatile_whirlpool_remove": "The whirlpool subsides!",
  "volatile_sandtomb_apply": "{pokemon_name} traps the target in a sand tomb!",
  "volatile_sandtomb_remove": "The sand tomb crumbles away!",
  "volatile_magmastorm_apply": "{pokemon_name} traps the target in a vortex of molten rock!",
  "volatile_magmastorm_remove": "The magma storm dies down!",
  "volatile_infestation_apply": "{pokemon_name} infests the target!",
  "volatile_infestation_remove": "The infestation ends!",
  "volatile_snaptrap_apply": "{pokemon_name} traps the target in a snap trap!",
  "volatile_snaptrap_remove": "The snap trap releases!",
  "volatile_roost_apply": "{pokemon_name} temporarily loses its Flying type!",
  "volatile_roost_remove": "{pokemon_name}'s Flying type is restored!",
  "volatile_burnup_apply": "{pokemon_name} loses its Fire type!",
  "volatile_burnup_remove": "{pokemon_name}'s Fire type is restored!",
  "volatile_doubleshock_apply": "{pokemon_name} loses its Electric type!",
  "volatile_doubleshock_remove": "{pokemon_name}'s Electric type is restored!",
  "volatile_disable_apply": "{pokemon_name} has a move disabled!",
  "volatile_disable_remove": "{pokemon_name} can use all moves again!",
  "volatile_encore_apply": "{pokemon_name} must repeat its last move!",
  "volatile_encore_remove": "{pokemon_name} is no longer forced to repeat its move!",
  "volatile_taunt_apply": "{pokemon_name} is taunted and can't use status moves!",
  "volatile_taunt_remove": "{pokemon_name} is no longer taunted!",
  "volatile_torment_apply": "{pokemon_name} can't use the same move twice in a row!",
  "volatile_torment_remove": "{pokemon_name} is no longer tormented!",
  "volatile_imprison_apply": "{pokemon_name} can't use moves known by the opponent!",
  "volatile_imprison_remove": "{pokemon_name} is no longer imprisoned!",
  "volatile_throatchop_apply": "{pokemon_name} can't use sound-based moves!",
  "volatile_throatchop_remove": "{pokemon_name} can use sound-based moves again!",
  "volatile_healblock_apply": "{pokemon_name} can't heal itself!",
  "volatile_healblock_remove": "{pokemon_name} can heal again!",
  "volatile_embargo_apply": "{pokemon_name} can't use its held item!",
  "volatile_embargo_remove": "{pokemon_name} can use its held item again!",
  "volatile_confusion_apply": "{pokemon_name} becomes confused!",
  "volatile_confusion_remove": "{pokemon_name} snaps out of confusion!",
  "volatile_infatuation_apply": "{pokemon_name} falls in love!",
  "volatile_infatuation_remove": "{pokemon_name} is no longer infatuated!",
  "volatile_leechseed_apply": "{pokemon_name} is seeded!",
  "volatile_leechseed_remove": "{pokemon_name} is no longer seeded!",
  "volatile_curseghost_apply": "{pokemon_name} is cursed!",
  "volatile_curseghost_remove": "{pokemon_name} is no longer cursed!",
  "volatile_nightmare_apply": "{pokemon_name} is trapped in a nightmare!",
  "volatile_nightmare_remove": "{pokemon_name} wakes from its nightmare!",
  "volatile_perishsong_apply": "{pokemon_name} hears the Perish Song! It will faint in 3 turns!",
  "volatile_perishsong_remove": "{pokemon_name} escapes the Perish Song!",
  "volatile_saltcure_apply": "{pokemon_name} is cured with salt!",
  "volatile_saltcure_remove": "{pokemon_name} is no longer affected by salt cure!",
  "volatile_substitute_apply": "{pokemon_name} creates a substitute!",
  "volatile_substitute_remove": "{pokemon_name}'s substitute fades away!",
  "volatile_endure_apply": "{pokemon_name} braces itself!",
  "volatile_endure_remove": "{pokemon_name} stops bracing!",
  "volatile_protect_apply": "{pokemon_name} protects itself!",
  "volatile_protect_remove": "{pokemon_name}'s protection fades!",
  "volatile_banefulbunker_apply": "{pokemon_name} protects itself with a poisonous barrier!",
  "volatile_banefulbunker_remove": "{pokemon_name}'s barrier fades!",
  "volatile_spikyshield_apply": "{pokemon_name} protects itself with a spiky barrier!",
  "volatile_spikyshield_remove": "{pokemon_name}'s spiky barrier fades!",
  "volatile_kingsshield_apply": "{pokemon_name} takes a defensive stance!",
  "volatile_kingsshield_remove": "{pokemon_name} returns to normal stance!",
  "volatile_magnetrise_apply": "{pokemon_name} levitated with magnetism!",
  "volatile_magnetrise_remove": "{pokemon_name} touches down!",
  "volatile_telekinesis_apply": "{pokemon_name} is held in the air by telekinesis!",
  "volatile_telekinesis_remove": "{pokemon_name} is released from telekinesis!",
  "volatile_ingrain_apply": "{pokemon_name} plants its roots!",
  "volatile_ingrain_remove": "{pokemon_name} uproots itself!",
  "volatile_aquaring_apply": "{pokemon_name} surrounds itself with a veil of water!",
  "volatile_aquaring_remove": "{pokemon_name}'s water veil disappears!",
  "volatile_smackdown_apply": "{pokemon_name} is knocked to the ground!",
  "volatile_smackdown_remove": "{pokemon_name} can fly again!",
  "volatile_outrage_apply": "{pokemon_name} goes on a rampage!",
  "volatile_outrage_remove": "{pokemon_name} calms down and becomes confused!",
  "volatile_thrash_apply": "{pokemon_name} thrashes about!",
  "volatile_thrash_remove": "{pokemon_name} stops thrashing and becomes confused!",
  "volatile_petaldance_apply": "{pokemon_name} dances with petals!",
  "volatile_petaldance_remove": "{pokemon_name} stops dancing and becomes confused!",
  "volatile_rollout_apply": "{pokemon_name} begins rolling!",
  "volatile_rollout_remove": "{pokemon_name} stops rolling!",
  "volatile_iceball_apply": "{pokemon_name} begins rolling an ice ball!",
  "volatile_iceball_remove": "{pokemon_name} stops rolling the ice ball!",
  "volatile_uproar_apply": "{pokemon_name} causes an uproar!",
  "volatile_uproar_remove": "{pokemon_name} calms down!",
  "volatile_charge_apply": "{pokemon_name} charges power!",
  "volatile_charge_remove": "{pokemon_name} uses its charged power!",
  "volatile_stockpile_apply": "{pokemon_name} stockpiled energy!",
  "volatile_stockpile_remove": "{pokemon_name} released its stockpiled energy!",
  "volatile_defensecurl_apply": "{pokemon_name} curled up!",
  "volatile_defensecurl_remove": "{pokemon_name} uncurled!",
  "volatile_minimize_apply": "{pokemon_name} minimized its body!",
  "volatile_minimize_remove": "{pokemon_name} returns to normal size!",
  "volatile_lockon_apply": "{pokemon_name} takes aim!",
  "volatile_lockon_remove": "{pokemon_name} loses its lock-on!",
  "volatile_mindreader_apply": "{pokemon_name} reads the target's mind!",
  "volatile_mindreader_remove": "{pokemon_name} stops reading the target's mind!",
  "volatile_foresight_apply": "{pokemon_name} identified the target!",
  "volatile_foresight_remove": "{pokemon_name} loses sight of the target!",
  "volatile_odorsleuth_apply": "{pokemon_name} identified the target by scent!",
  "volatile_odorsleuth_remove": "{pokemon_name} loses the scent!",
  "volatile_miracleeye_apply": "{pokemon_name} identified the target with miraculous sight!",
  "volatile_miracleeye_remove": "{pokemon_name} loses its miraculous sight!",
  "volatile_followme_apply": "{pokemon_name} becomes the center of attention!",
  "volatile_followme_remove": "{pokemon_name} is no longer the center of attention!",
  "volatile_ragepowder_apply": "{pokemon_name} draws attention with rage powder!",
  "volatile_ragepowder_remove": "{pokemon_name} stops drawing attention!",
  "volatile_spotlight_apply": "{pokemon_name} is in the spotlight!",
  "volatile_spotlight_remove": "{pokemon_name} is no longer in the spotlight!",
  "volatile_meanlook_apply": "{pokemon_name} can't escape!",
  "volatile_meanlook_remove": "{pokemon_name} can escape again!",
  "volatile_block_apply": "{pokemon_name} is blocked from escaping!",
  "volatile_block_remove": "{pokemon_name} can escape again!",
  "volatile_spiderweb_apply": "{pokemon_name} is trapped in a web!",
  "volatile_spiderweb_remove": "{pokemon_name} breaks free from the web!",
  "volatile_anchorshot_apply": "{pokemon_name} is anchored and can't escape!",
  "volatile_anchorshot_remove": "{pokemon_name} is no longer anchored!",
  "volatile_spiritshackle_apply": "{pokemon_name}'s spirit is shackled!",
  "volatile_spiritshackle_remove": "{pokemon_name}'s spirit is free!",
  "volatile_thousandwaves_apply": "{pokemon_name} is trapped by waves!",
  "volatile_thousandwaves_remove": "{pokemon_name} escapes the waves!",
  "volatile_octolock_apply": "{pokemon_name} is locked by the octopus!",
  "volatile_octolock_remove": "{pokemon_name} escapes the octolock!",
  "volatile_noretreat_apply": "{pokemon_name} can no longer retreat!",
  "volatile_noretreat_remove": "{pokemon_name} can retreat again!",
  "volatile_jawlock_apply": "{pokemon_name} locks jaws and can't escape!",
  "volatile_jawlock_remove": "{pokemon_name} unlocks its jaws!",
  "volatile_hyperbeam_apply": "{pokemon_name} must recharge!",
  "volatile_hyperbeam_remove": "{pokemon_name} finishes recharging!",
  "volatile_gigaimpact_apply": "{pokemon_name} must recharge!",
  "volatile_gigaimpact_remove": "{pokemon_name} finishes recharging!",
  "volatile_blastburn_apply": "{pokemon_name} must recharge!",
  "volatile_blastburn_remove": "{pokemon_name} finishes recharging!",
  "volatile_frenzyplant_apply": "{pokemon_name} must recharge!",
  "volatile_frenzyplant_remove": "{pokemon_name} finishes recharging!",
  "volatile_hydrocannon_apply": "{pokemon_name} must recharge!",
  "volatile_hydrocannon_remove": "{pokemon_name} finishes recharging!",
  "volatile_rockwrecker_apply": "{pokemon_name} must recharge!",
  "volatile_rockwrecker_remove": "{pokemon_name} finishes recharging!",
  "volatile_roaroftime_apply": "{pokemon_name} must recharge!",
  "volatile_roaroftime_remove": "{pokemon_name} finishes recharging!",
  "volatile_status_unknown_apply": "{pokemon_name} is affected by {status_name}!",
  "volatile_status_unknown_remove": "{pokemon_name} is no longer affected by {status_name}!",
  "_comment_persistent_weather": "=== PERSISTENT WEATHER EFFECTS ===",
  "weather_rain_still": "It is still raining!",
  "weather_sun_still": "The sunlight is still harsh!",
  "weather_sand_still": "The sandstorm is still raging!",
  "weather_hail_still": "It is still hailing!",
  "weather_fog_still": "The fog is still thick!",
  "_comment_persistent_status": "=== PERSISTENT STATUS EFFECTS ===",
  "status_par_still": "{pokemon_name} is still paralyzed!",
  "status_brn_still": "{pokemon_name} is still burned!",
  "status_psn_still": "{pokemon_name} is still poisoned!",
  "status_slp_still": "{pokemon_name} is still asleep!",
  "status_frz_still": "{pokemon_name} is still frozen!",
  "status_tox_still": "{pokemon_name} is still badly poisoned!",
  "_comment_persistent_volatile": "=== PERSISTENT VOLATILE STATUS ===",
  
  "volatile_aquaring_still":  "{pokemon_name} is still surrounded by a veil of water!",
  "volatile_ingrain_still":   "{pokemon_name} is still rooted and cannot switch out!",
  "volatile_leechseed_still": "{pokemon_name} is still seeded!",
  "volatile_stockpile_still": "{pokemon_name} still has energy stockpiled!",

  "volatile_curseghost_still":  "{pokemon_name} is still cursed!",
  "volatile_nightmare_still":   "{pokemon_name} is still trapped in a nightmare!",
  "volatile_perishsong_still":  "{pokemon_name} is still under Perish Song!",

  "volatile_solarbeam_still":    "{pokemon_name} is still gathering sunlight!",
  "volatile_razorwind_still":    "{pokemon_name} is still whipping up a whirlwind!",
  "volatile_skullbash_still":    "{pokemon_name} is still withdrawing its shell!",
  "volatile_freezeshock_still":  "{pokemon_name} is still building electrical energy!",
  "volatile_iceburn_still":      "{pokemon_name} is still gathering frigid flames!",
  "volatile_geomancy_still":     "{pokemon_name} is still absorbing land energy!",
  "volatile_fly_still":          "{pokemon_name} is still flying high!",
  "volatile_dig_still":          "{pokemon_name} is still underground!",
  "volatile_dive_still":         "{pokemon_name} is still submerged!",
  "volatile_bounce_still":       "{pokemon_name} is still bouncing up!",
  "volatile_phantomforce_still":"{pokemon_name} is still vanished in another dimension!",
  "volatile_shadowforce_still":  "{pokemon_name} is still hidden in the shadows!",
  "volatile_skydrop_still":      "{pokemon_name} is still holding the foe aloft!",

  "volatile_bind_still":       "{pokemon_name} is still bound!",
  "volatile_wrap_still":       "{pokemon_name} is still wrapped around the foe!",
  "volatile_firespin_still":   "{pokemon_name} is still trapped in the fire spin!",
  "volatile_whirlpool_still":  "{pokemon_name} is still trapped in the whirlpool!",
  "volatile_sandtomb_still":   "{pokemon_name} is still trapped in the sand tomb!",
  "volatile_magmastorm_still": "{pokemon_name} is still trapped in the magma storm!",
  "volatile_infestation_still":"{pokemon_name} is still infesting the foe!",
  "volatile_snaptrap_still":   "{pokemon_name} is still caught in the snap trap!",

  "volatile_encore_still":     "{pokemon_name} must still repeat its last move!",
  "volatile_disable_still":    "{pokemon_name}'s move is still disabled!",
  "volatile_taunt_still":      "{pokemon_name} is still taunted!",
  "volatile_torment_still":    "{pokemon_name} is still tormented!",
  "volatile_embargo_still":    "{pokemon_name} is still under embargo!",
  "volatile_healblock_still":  "{pokemon_name} is still prevented from healing!",
  "volatile_throatchop_still": "{pokemon_name} still can't use sound moves!",
  "volatile_imprison_still":   "{pokemon_name} is still imprisoned!",

  "volatile_meanlook_still":    "{pokemon_name} still can't escape!",
  "volatile_spiderweb_still":   "{pokemon_name} is still trapped by a web!",
  "volatile_octolock_still":    "{pokemon_name} is still locked in by Octolock!",
  "volatile_magnetrise_still":  "{pokemon_name} is still levitated!",
  "volatile_telekinesis_still": "{pokemon_name} is still held aloft!",

  "volatile_roost_still":       "{pokemon_name} still has no Flying type!",
  "volatile_burnup_still":      "{pokemon_name} still has no Fire type!",
  "volatile_doubleshock_still": "{pokemon_name} still has no Electric type!",

  "volatile_outrage_still":      "{pokemon_name} is still locked in a rampage!",
  "volatile_thrash_still":       "{pokemon_name} is still thrashing about!",
  "volatile_petaldance_still":   "{pokemon_name} is still dancing with petals!",
  "volatile_rollout_still":      "{pokemon_name} is still rolling!",
  "volatile_iceball_still":      "{pokemon_name} is still rolling an ice ball!",
  "volatile_uproar_still":       "{pokemon_name} is still causing an uproar!",

  "volatile_substitute_still":    "{pokemon_name}'s substitute is still active!",
  "volatile_protect_still":       "{pokemon_name} is still protected!",
  "volatile_banefulbunker_still":"{pokemon_name} is still protected by a barrier!",
  "volatile_spikyshield_still":   "{pokemon_name} is still protected by a spiky barrier!",
  "volatile_kingsshield_still":   "{pokemon_name} is still in a defensive stance!",

  "volatile_confusion_still":     "{pokemon_name} is still confused!",
  "volatile_infatuation_still":   "{pokemon_name} is still infatuated!",
  
  "status_paralyzed_still": "{pokemon_name} is still paralyzed!",
  "status_burn_still":      "{pokemon_name} is still burned!",
  "status_poison_still":    "{pokemon_name} is still poisoned!",
  "status_sleep_still":     "{pokemon_name} is still asleep!",
  "status_frozen_still":    "{pokemon_name} is still frozen!",
  "status_toxic_still":     "{pokemon_name} is still badly poisoned!"


}


